import { VerticalBox } from "std-widgets.slint";
import { Theme, TitleBar } from "common.slint";
import { WelcomePage } from "welcome_page.slint";
import { TermsPage } from "terms_page.slint";
import { LocationPage } from "location_page.slint";
import { InstallingPage } from "installing_page.slint";
import { CompletePage } from "complete_page.slint";

// Import Minecraft fonts
import "../res/fonts/Minecraft-Seven_v2.ttf";
import "../res/fonts/Minecraft-Tenv2.ttf";

// Page enumeration
export enum Page {
    Welcome,
    TermsOfService,
    Location,
    Installing,
    Complete
}

export component App inherits Window {
    title: "Obsidian Installer";
    // Minecraft fonts are embedded and registered at runtime (TTF format)
    default-font-family: "Minecraft Seven v2";
    background: Theme.bg-primary;
    no-frame: true;

    // Fixed window size - not resizable
    min-width: 1280px;
    max-width: 1280px;
    min-height: 720px;
    max-height: 720px;

    // Public properties
    in-out property <image> app-icon;
    in-out property <Page> current-page: Page.Welcome;
    in-out property <string> tos-content;
    in-out property <bool> tos-accepted: false;
    in-out property <string> install-path: "C:\\Program Files\\Obsidian Minecraft Server Panel";
    in-out property <bool> install-as-service: true;
    in-out property <bool> start-with-windows: false;
    in-out property <string> install-status: "Preparing...";
    in-out property <float> install-progress: 0.0;
    in-out property <bool> install-success: true;
    in-out property <string> complete-message: "";

    // Callbacks
    callback request-exit-app;
    callback minimize-window;
    callback drag-window(length, length);
    callback browse-folder;
    callback start-installation;
    callback launch-app;

    VerticalLayout {
        // Title bar
        TitleBar {
            app-icon: root.app-icon;
            border-top-left-radius: 14px;
            border-top-right-radius: 14px;
            minimize-clicked => {
                root.minimize-window();
            }
            close-clicked => {
                root.request-exit-app();
            }
            drag-start(x, y) => {
                root.drag-window(x, y);
            }
        }

        // Main content area with page transitions
        Rectangle {
            background: Theme.bg-primary;

            if current-page == Page.Welcome: WelcomePage {
                next-clicked => {
                    current-page = Page.TermsOfService;
                }

                states [
                    visible when current-page == Page.Welcome: {
                        opacity: 1;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                        out {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                ]
            }

            if current-page == Page.TermsOfService: TermsPage {
                tos-content: root.tos-content;
                accepted <=> tos-accepted;
                back-clicked => {
                    current-page = Page.Welcome;
                }
                next-clicked => {
                    current-page = Page.Location;
                }

                states [
                    visible when current-page == Page.TermsOfService: {
                        opacity: 1;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                        out {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                ]
            }

            if current-page == Page.Location: LocationPage {
                install-path <=> root.install-path;
                install-as-service <=> root.install-as-service;
                start-with-windows <=> root.start-with-windows;
                back-clicked => {
                    current-page = Page.TermsOfService;
                }
                install-clicked => {
                    current-page = Page.Installing;
                    root.start-installation();
                }
                browse-clicked => {
                    root.browse-folder();
                }

                states [
                    visible when current-page == Page.Location: {
                        opacity: 1;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                        out {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                ]
            }

            if current-page == Page.Installing: InstallingPage {
                status-text: install-status;
                progress: install-progress;

                states [
                    visible when current-page == Page.Installing: {
                        opacity: 1;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                ]
            }

            if current-page == Page.Complete: CompletePage {
                success: install-success;
                message: complete-message;
                launch-clicked => {
                    root.launch-app();
                }
                finish-clicked => {
                    root.request-exit-app();
                }

                states [
                    visible when current-page == Page.Complete: {
                        opacity: 1;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                ]
            }
        }
    }
}
